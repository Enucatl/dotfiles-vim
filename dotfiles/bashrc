# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
# ... or force ignoredups and ignorespace
export HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

PS1='${debian_chroot:+($debian_chroot)}\A \u@\h:\w`__git_ps1`\$ '
unset color_prompt force_color_prompt

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if [ -e ~/.bash_profile ]; then
    source ~/.bash_profile
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# some more aliases

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

#pythonbrew support
if [ -e ~/.pythonbrew/ ]; then
    source ~/.pythonbrew/etc/bashrc
fi

export PATH=~/.local/bin:~/bin:~/bin/backup:$PATH
export HISTIGNORE="c:clear:exit"
export PYTHONPATH=$PYTHONPATH:.:~/bin:/usr/lib/root:~/lab:
export ROOTLIB=/usr/lib/root
export LD_LIBRARY_PATH=/usr/lib/:/usr/local/lib:$ROOTLIB:$LD_LIBRARY_PATH
export EDITOR=~/bin/gvim_fg

setxkbmap -option caps:escape
shopt -s cdspell
shopt -s extglob
shopt -s cmdhist
set bell-style none
set -o vi
set -o ignoreeof
PROMPT_COMMAND='history -a'

set page-completions off
set show-all-if-ambiguous on
set editing-mode vi
set keymap vi

#Python pyenv
if [ -e ~/.pyenv/ ]; then
    export PYENV_ROOT=$HOME/.pyenv
    PATH=$PYENV_ROOT/bin:$PATH
    eval "$(pyenv init -)"
fi

#RUBY rvm
if [ -e ~/.rvm/ ]; then
    PATH=~/.rvm/bin:$PATH # Add RVM to PATH for scripting
    source ~/.rvm/scripts/rvm
fi

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

### Added for haskell local modules
if [ -e ~/.pyenv/ ]; then
    PATH=~/.cabal/bin:$PATH
fi

#cd..... and mcd functions:
if [ -f ~/bin/func_mcd ]; then
    source ~/bin/func_mcd
fi
if [ -f ~/bin/func_cd ]; then
    source ~/bin/func_cd
fi
if [ -f ~/bin/func_sortdu ]; then
    source ~/bin/func_sortdu
fi
